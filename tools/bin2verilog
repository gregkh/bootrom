#! /usr/bin/env python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# Convert a raw binary file into a Verilog download file for Toshiba.
#
# See: Toshiba's "ARA ES3 Bridge ROM Programming Guide"
#

from __future__ import print_function
from time import gmtime, strftime
from struct import unpack_from, pack_into
import os
import sys
import argparse
import errno

DEFAULT_ROM_SIZE = 148 * 1024

# Length of the serial number
SERNO_LENGTH = 8

SIZEOF_ULONG = 4


def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)


def error(*objs):
    print("ERROR: ", *objs, file=sys.stderr)


def auto_int(x):
    # Workaround to allow hex numbers to be entered for numeric arguments.
    return int(x, 0)


def validate_args(args):
    # Sanity-check the command line args and return a "valid" flag
    success = True
    if not args.input:
        error("Missing --input file")
        success = False
    if not args.out:
        error("Missing --out file")
        success = False
    if not args.apb and not args.gpb:
        error("You must specify --apb or --gpb")
        success = False
    elif args.apb and args.gpb:
        error("You must specify only one of --apb or --gpb")
        success = False
    if args.load < 0 or args.load > 0xffffffff:
        error("--load is out of range")
        success = False
    if args.size < 0 or args.size > 0xffffffff:
        error("--start is out of range")
        success = False
    if args.version > 9:
        error("--version is out of range")
        success = False
    return success


def filter_file(infilename, outfilename, load, rom_size, version,
                is_ap_bridge):
    """Filter the .bin file into a Verilog download file

    Create an extended .bin file containing the original .bin contents
    padded out with FFFFFFFF up to the last 2 ULONGs, which contain the
    serial number.

    Create the Verilog download file (essentially a hex dump) from the
    extended .bin file.

    Create a .bitcount file, containing the count of "1" bits in the
    extended .bin file. This is an ASCII decimal number.
    """
    file_length = os.path.getsize(infilename)
    if file_length > (rom_size - SERNO_LENGTH):
        raise ValueError("Bin file too big")

    # Convert the rom size from bytes to ULONGs
    buffer = bytearray(rom_size)
    with open(infilename, "rb") as infile:
        # Read the input file and pad as needed to be DWORD-aligned
        infile.readinto(buffer)

    offset = file_length
    if (offset % SIZEOF_ULONG) != 0:
        # Zero-pad as needed to become ULONG-aligned. (Since the
        # buffer was pre-zeroed, we need only bump the offset up.
        offset += SIZEOF_ULONG - (offset % SIZEOF_ULONG)

    # Pad with 0xffffffff up to the start of the serial number
    while offset < (rom_size - SERNO_LENGTH):
        pack_into("<L", buffer, offset, 0xffffffff)
        offset += SIZEOF_ULONG

    # Finish the buffer off with the 8-byte serial number, derived from the
    # date, time and version.
    timestamp = strftime("%y%m%d", gmtime())
    timestamp += "{0:d}{1:d}".format(is_ap_bridge, version)
    pack_into("<bbbbbbbb", buffer, offset,
              ord(timestamp[0]), ord(timestamp[1]),
              ord(timestamp[2]), ord(timestamp[3]),
              ord(timestamp[4]), ord(timestamp[5]),
              ord(timestamp[6]), ord(timestamp[7]))

    # Write the .dat hex file (typically bromcAP.dat or bromcGP.dat)
    with open(outfilename, "w") as outfile:
        # Write the file out as "@addr ULONG" in hex.
        address = load
        for offset in range(0, rom_size, SIZEOF_ULONG):
            unpacked_data = unpack_from("<L", buffer, offset)
            data = unpacked_data[0]
            outfile.write("@{0:x} {1:08x}\n".format(address, data))
            address += 1

    # Write the corresponding bin file (typically bromcAP.bin or bromcGP.bin)
    root, ext = os.path.splitext(outfilename)
    with open(root + ".bin", "wb") as outfile:
        outfile.write(buffer)

    # Write the corresponding bitcount file (typically bromcAP.bitcount or
    # bromcGP.bitcount)
    with open(root + ".bitcount", "wb") as outfile:
        print(sum(bin(b).count("1") for b in buffer), file=outfile)


def main():
    """Application to convert a raw binary file into a Verilog download file

    This is covered in detail in "ES3 Bridge ASIC Boot ROM High Level Design".

    Usage: bin2verilog --in <file> --out <file> \
           [--apb | --gpb] --offset <num> --size <num>
    Where:
        --input
            The pathname of the input (.bin) file.
        --out
            Specifies the output file
        --load
            Set the offset of the start of the input to <num> instead of zero.
        --size
            Set the size of the output ROM <num>
        --version
            Set the version number of the output file serial number
        --apb
            Designate the target as an AP bridge
        --gpb
            Designate the target as a GP bridge

    The typical --out is either bromcAP.dat or bromcGP.dat. This application
    also generates corresponding .bin and .bitcount files:
    - bromcAP.bin/bromcGP.bin
         The original input.bin, padded with 0xff and ending with the 8-byte
         serial number.
    - bromcAP.bitcount/bromcGP.bitcount
         Contain an ASCII decimal number which is the count of "1" bits in the
         generated bromcAP.bin/bromcGP.bin file.
    """
    parser = argparse.ArgumentParser()

    # String/file args
    parser.add_argument("--input",
                        help="The name of the input binary file")

    parser.add_argument("--out",
                        help="The name of the Verilog download file")

    # Numeric args
    parser.add_argument("--load",
                        type=auto_int,
                        default=0,
                        help="The load address for the image (if not zero)")

    parser.add_argument("--size",
                        type=auto_int,
                        required=True,
                        help="Set the size of the output ROM")

    parser.add_argument("--version",
                        type=auto_int,
                        default=0,
                        help="version number of the output file")

    # Flags args
    parser.add_argument("--apb",
                        action='store_true',
                        help="target is AP Bridge")

    parser.add_argument("--gpb",
                        action='store_true',
                        help="target is GP Bridge")

    args = parser.parse_args()

    # Sanity-check the arguments
    if not validate_args(args):
        print("Invalid args")
        sys.exit(errno.EINVAL)

    # Filter the file
    try:
        filter_file(args.input, args.out, args.load, args.size, args.version,
                    args.apb)
        print("Wrote", args.out)
    except:
        error("Could not filter", args.input, "to", args.out)

    print("Done")

## Launch main
#
if __name__ == '__main__':
    main()
