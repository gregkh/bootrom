MEMORY
{
    rom  (rx)  : ORIGIN = 0x0,        LENGTH = 16K

    /* WARNING!!!: Assumption is that workram will always be
       a multiple of 32 bytes. If this become not true for some interesting
       reason, we have to modify the code boot.S. */
    sram (rwx) : ORIGIN = 0x10000000, LENGTH = 192K

    bufram0 (rwx) : ORIGIN = 0x20000000, LENGTH = 48K
    bufram1 (rwx) : ORIGIN = 0x2000C000, LENGTH = 48K
    bufram2 (rwx) : ORIGIN = 0x20018000, LENGTH = 48K
    bufram3 (rwx) : ORIGIN = 0x20024000, LENGTH = 48K
}

ENTRY(Reset_Handler)

REGION_ALIAS("REGION_TEXT", sram);

_workram_start = ORIGIN(sram);
_workram_end = ORIGIN(sram) + LENGTH(sram);
_bufram_start = ORIGIN(bufram0);
_bufram_end = ORIGIN(bufram3) + LENGTH(bufram3);

/**
 * Boot ROM burned into ES3 chip needs around 9kB data sections,
 * including .data, .bss.
 * This part cannot be used for .data/.text/.s2lcfg of S2L, but it
 * is OK to use it as .bss. And boot ROM will zero this part of memory.
 * Give some buffer for debug build of boot ROM to run on HAPS.
 * Let's reserve 12kB (including the 1kB communication area).
 */
_bootrom_data_size = 11k;

/**
 * NOTE: _communication_area_size must match COMMUNICATION_AREA_LENGTH in
 * bootrom.h!
 */
_communication_area_size = 1024; /* includes resume address */

_resume_data_size = 12;  /* bytes */
_resume_data = _workram_end - _resume_data_size;
_communication_area = _workram_end - _communication_area_size;

_s2l_text_area = _communication_area - _total_size;

_stack_top = ORIGIN(bufram3) + LENGTH(bufram3);

/**
 * The following two are defined to satisfy the existing code
 */
_bootrom_text_area = _s2l_text_area;
_bootrom_data_area = _ss2lcfg;

OUTPUT_ARCH(arm)
SECTIONS
{
	.text (_s2l_text_area) : {
		_stext = ABSOLUTE(.);
		*(.vectors)
		*(.text .text.*)
		*(.rodata .rodata.*)
		*(.gnu.linkonce.t.*)
		*(.gnu.linkonce.r.*)
		_etext = ABSOLUTE(.);
	} > REGION_TEXT

	/**
	 * .s2lcfg has to be placed BEFORE .data
	 * This requirement is a hack to make sure real config data, which
	 * is generated by another tool and built into the TFTF image by
	 * create-tftf, does not exceeds the size limit of the .s2lcfg.
	 * If it did exceed, it would conflict with .data and create error
	 * to notify the developer
	 */
	.s2lcfg : {
		_ss2lcfg = ABSOLUTE(.);
		*(.s2lcfg .s2lcfg.*)
	} > sram

	.data : {
		_sdata = ALIGN(4);
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		_edata = ALIGN(4);
	} > sram

	.bss ALIGN(4): {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		_ebss = ABSOLUTE(.);
	} > sram

	/**
	 * make sure no other sections step into the data area of boot ROM
	 */
	_bss_size = SIZEOF(.bss) > _bootrom_data_size ?
	            SIZEOF(.bss) :
	            _bootrom_data_size;
	_total_size = SIZEOF(.data) + _bss_size + SIZEOF(.text) + SIZEOF(.s2lcfg);
}

