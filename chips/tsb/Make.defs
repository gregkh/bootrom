##
 # Copyright (c) 2015 Google Inc.
 # All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are met:
 # 1. Redistributions of source code must retain the above copyright notice,
 # this list of conditions and the following disclaimer.
 # 2. Redistributions in binary form must reproduce the above copyright notice,
 # this list of conditions and the following disclaimer in the documentation
 # and/or other materials provided with the distribution.
 # 3. Neither the name of the copyright holder nor the names of its
 # contributors may be used to endorse or promote products derived from this
 # software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 # THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 # OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 # WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 # OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 # ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ##

CHIPINCLUDES = -I$(CHIP_DIR)/include
CHIPINCLUDES += -Ichips/$(CONFIG_ARCH_EXTRA)/include

CHIPCFLAGS = -mcpu=cortex-m3 -mthumb -mfloat-abi=soft
CHIPCFLAGS += -fno-builtin -ffunction-sections

CHIPWARNINGS = -Wall -Wstrict-prototypes -Wshadow

ifeq ($(_DEBUGMSGS),1)
CONFIG_GPIO = y
CONFIG_UART_CLOCK_DIVIDER = 4
endif

CHIPDEFINES =  -DUART_CLOCK_DIVIDER=$(CONFIG_UART_CLOCK_DIVIDER)
CHIPDEFINES += -DCONFIG_CHIP_REVISION=$(CONFIG_CHIP_REVISION)
CHIPDEFINES += -DUNIPRO_ACTIVE=$(UNIPRO_ACTIVE)
CHIPDEFINES += -DBOOTROM_MODULE_VID=$(CONFIG_BOOTROM_MODULE_VID)
CHIPDEFINES += -DBOOTROM_MODULE_PID=$(CONFIG_BOOTROM_MODULE_PID)
CHIPOPTIMIZATION = -Os

CHIPLINKFLAGS = --gc-sections

# NOTE: If you have scripts that are independant of BOOT_STAGE, place them
# before the "else ifeq ($(BOOT_STAGE),1)" line. (BOOT_STAGE defaults to 1
# in Makefile)
ifeq ($(BUILD_FOR_SIGN_VERIFY),1)
  ifneq ("$(wildcard $(ARCH_EXTRA_DIR)/scripts/ld_signverify.script)","")
    LDSCRIPT = $(ARCH_EXTRA_DIR)/scripts/ld_signverify.script
  else
    LDSCRIPT = $(CHIP_DIR)/scripts/ld_signverify.script
  endif
else ifeq ($(BOOT_STAGE),1)
  ifneq ("$(wildcard $(ARCH_EXTRA_DIR)/scripts/ld.script)","")
    LDSCRIPT = $(ARCH_EXTRA_DIR)/scripts/ld.script
  else
    LDSCRIPT = $(CHIP_DIR)/scripts/ld.script
  endif
else ifeq ($(BOOT_STAGE),2)
  ifneq ("$(wildcard $(ARCH_EXTRA_DIR)/scripts/ld_2ndstage.script)","")
    LDSCRIPT = $(ARCH_EXTRA_DIR)/scripts/ld_2ndstage.script
  else
    LDSCRIPT = $(CHIP_DIR)/scripts/ld_2ndstage.script
  endif
else ifeq ($(BOOT_STAGE),3)
  ifneq ("$(wildcard $(ARCH_EXTRA_DIR)/scripts/ld_3rdstage.script)","")
    LDSCRIPT = $(ARCH_EXTRA_DIR)/scripts/ld_3rdstage.script
  else
    LDSCRIPT = $(CHIP_DIR)/scripts/ld_3rdstage.script
  endif
endif

ifeq ($(CONFIG_BOOT_FROM_SLOW_ROM),y)
  CHIPDEFINES += -DBOOT_FROM_SLOW_ROM
else
  CHIPDEFINES += -DBOOT_FROM_ROM
endif

CROSS_COMPILE = arm-none-eabi-
CC := $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld
AR = $(CROSS_COMPILE)ar
NM = $(CROSS_COMPILE)nm
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump

ifeq ($(CONFIG_DEBUG),y)
  CHIPOPTIMIZATION := -Og
  DEBUGFLAGS := -ggdb -D_DEBUG
endif

EXTRADEFINES :=
ifeq ($(CONFIG_GPIO),y)
	EXTRADEFINES += -DCONFIG_GPIO
endif

CFLAGS =  $(DEBUGFLAGS) $(CHIPCFLAGS) $(CHIPWARNINGS) $(CHIPOPTIMIZATION)
CFLAGS += $(CHIPCPUFLAGS) $(INCLUDES) $(CHIPDEFINES) $(EXTRADEFINES) -pipe

AFLAGS = $(CFLAGS) -D__ASSEMBLY__

LINKFLAGS = -Map=$(OUTROOT)/System.map $(CHIPLINKFLAGS)

# Ideally a -lgcc should be able to link libgcc.a. However there is a known
# issue for the GNU ARM linker to find the correct libgcc for the specific
# target core, and it would cause the linking fail.
LIBGCC_FILENAME = $(shell $(CC) $(CHIPCFLAGS) -print-libgcc-file-name)
EXTRALIBS = $(LIBGCC_FILENAME)
