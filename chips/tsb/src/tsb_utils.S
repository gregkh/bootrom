/**
 * Copyright (c) 2015 Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

.syntax		unified
.file		"tsb_utils.S"

#include "chipdef.h"

.text
.thumb
.thumb_func
.align	2

.globl chip_delay
.type  chip_delay, %function
/**
 * 18 nop, and two more instructions per loop
 * a little bit more than 200ns per loop
 */
chip_delay:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    subs r0, r0, #1
    bne chip_delay
    bx lr

.globl chip_clear_image_loading_ram
.type chip_clear_image_loading_ram, %function
chip_clear_image_loading_ram:
    push {r0, r8, r9}
    ldr r0, =0
    /* Just clear the BootRom .data, .bss, stack and communication region*/
    ldr r8, =_workram_start
#if BOOT_STAGE == 1
    ldr r9, =_bootrom_data_area
#elif BOOT_STAGE == 2
    ldr r9, =_bootrom_text_area
#else
    pop {r0, r8, r9}
    bx lr
#endif

clear_loading_ram:
    str r0, [r8], #4
    cmp r8, r9
    bne clear_loading_ram

    pop {r0, r8, r9}
    bx lr

